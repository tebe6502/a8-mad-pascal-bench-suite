; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/07/23] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_002D

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILLCHAR_0068					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex

; ---------------------  ASM Block 024  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	FILLCHAR_0072					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex

; ---------------------  ASM Block 025  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MOVE_007C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex

; ---------------------  ASM Block 031  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MOVE_0086					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex

; ---------------------  ASM Block 033  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PAUSE_00A4					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	B_SYSTEM					; UNIT

.local	SYSTEMOFF_00A5					; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x PORT_B
	dex

; ---------------------  ASM Block 049  ---------------------


		;lda:cmp:req 20 ;; removed due to problem with nmien = 0 already set
		sei
		mva #0 NMIEN

		mva port_b PORTB
		mwa #__nmi NMIVEC

		lda <__iret
		sta IRQVEC
		sta __vblvec
		sta __dlivec

		lda >__iret
		sta IRQVEC+1
		sta __vblvec+1
		sta __dlivec+1

		mva #$40 NMIEN
		sta __nmien
		bne __stop
__nmi
		bit NMIST
		bpl __vbl
		jmp __dlivec
.def :__dlivec = *-2
		rti
__vbl
		inc rtclok+2
		bne __vblvec-1
		inc rtclok+1
		bne __vblvec-1
		inc rtclok
		jmp __vblvec
.def :__vblvec = *-2
.def :__iret
    	rti
__stop


; ------------------------------------------------------------

PORT_B	= DATAORIGIN+$000C

@VarData	= PORT_B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SYSTEMOFF_00A9					; PROCEDURE | OVERLOAD

; optimize FAIL ('SYSTEMOFF_00A5', B_SYSTEM), line = 180
	inx
	mva #$FE :STACKORIGIN,x
	jsr SYSTEMOFF_00A5
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	ENABLEVBLI					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VBLPTR
	mva :STACKORIGIN+STACKWIDTH,x VBLPTR+1
	dex

; ---------------------  ASM Block 051  ---------------------


		lda:cmp:req 20
		mva #0 NMIEN
		mwa vblptr __vblvec
		lda __nmien
		ora #$40
		sta NMIEN
		sta __nmien


; ------------------------------------------------------------

VBLPTR	= DATAORIGIN+$000D

@VarData	= VBLPTR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DISABLEVBLI					; PROCEDURE | ASSEMBLER

; ---------------------  ASM Block 052  ---------------------


		lda:cmp:req 20
		mva #0 NMIEN
		mwa #__iret __vblvec
		lda __nmien
		ora #$40
		sta NMIEN
		sta __nmien

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__NMIEN	= DATAORIGIN+$000B
PORTB_SELFTEST_OFF	= $80
PORTB_BASIC_OFF	= $02
PORTB_SYSTEM_ON	= $01

.endl							; UNIT B_SYSTEM

; ------------------------------------------------------------

.local	BSORT						; UNIT

.local	RUN						; PROCEDURE

; optimize OK (BSORT), line = 29

	mva #$FE SIZE

; optimize OK (BSORT), line = 29

	mva #$FF TMP

; --- WhileProlog
	jmp l_00C4
l_00C5
; --- For

; optimize OK (BSORT), line = 31

	mva #$00 I

; optimize OK (BSORT), line = 31

l_00CE
; --- ForToDoCondition

; optimize OK (BSORT), line = 31

	lda I
	cmp #$FE
	jcs l_00DC

; optimize OK (BSORT), line = 32

	tay
	lda adr.SORTTABLE,y
	sta N1

; optimize OK (BSORT), line = 33

	iny
	lda adr.SORTTABLE,y
	sta N2

; optimize OK (BSORT), line = 34

	lda N1
	cmp N2
	jcc l_0106
	jeq l_0106

; optimize OK (BSORT), line = 35

	ldy I
	mva N2 adr.SORTTABLE,y

; optimize OK (BSORT), line = 36

	iny
	mva N1 adr.SORTTABLE,y
l_0106

; --- ForToDoEpilog
	inc I
	jne l_00CE
l_00DC

; optimize FAIL (0, BSORT), line = 39
	dec SIZE
l_00C4

; optimize OK (BSORT), line = 30

	lda SIZE
	jne l_00C5

; ------------------------------------------------------------

I	= $F0
N1	= $F1
N2	= $F2
TMP	= $F3
SIZE	= $F4
adr.SORTTABLE	= [DATAORIGIN+$000F] .array [255]
.var SORTTABLE	= adr.SORTTABLE .word
@FORTMP_00CB	= $FD

@VarData	= SORTTABLE
@VarDataSize	= 255

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

adr.NAME	= CODEORIGIN+$0000
.var NAME	= adr.NAME .word

.endl							; UNIT BSORT

; ------------------------------------------------------------

.local	SIEVE						; UNIT

.local	RUN						; PROCEDURE

; optimize OK (SIEVE), line = 27

	mva #$00 COUNT
	sta COUNT+1

; optimize OK (SIEVE), line = 28

	lda FLAGS
	sta :edx
	lda FLAGS+1
	sta :edx+1
	lda #$00
	sta :ecx
	lda #$20
	sta :ecx+1
	lda #$01
	sta :eax
	jsr @fill
; --- For

; optimize OK (SIEVE), line = 29

	mva #$02 N

; optimize OK (SIEVE), line = 29

l_014A
; --- ForToDoCondition

; optimize OK (SIEVE), line = 29

	lda N
	cmp #$5C
	jcs l_0158

; optimize OK (SIEVE), line = 30

	lda FLAGS
	add N
	tay
	lda FLAGS+1
	adc #$00
	sta :bp+1
	lda (:bp),y
	jeq l_0167

; optimize OK (SIEVE), line = 31

	lda N
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta K+1
	lda :STACKORIGIN+9
	sta K

; --- WhileProlog
	jmp l_0174
l_0175

; optimize OK (SIEVE), line = 33

	lda FLAGS
	add K
	tay
	lda FLAGS+1
	adc K+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (SIEVE), line = 34

	lda K
	add N
	sta K
	scc
	inc K+1
l_0174

; optimize OK (SIEVE), line = 32

	lda K+1
	cmp #$20
	bne @+
	lda K
	cmp #$00
@
	jcc l_0175
l_0167

; --- ForToDoEpilog
	inc N
	jne l_014A
l_0158

; ------------------------------------------------------------

adr.FLAGS	= [DATAORIGIN+$010E] .array [8192]
.var FLAGS	= adr.FLAGS .word
N	= $E0
K	= $E2
COUNT	= $E4
@FORTMP_0147	= $5B

@VarData	= FLAGS
@VarDataSize	= 8192

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

adr.NAME	= CODEORIGIN+$0008
.var NAME	= adr.NAME .word

.endl							; UNIT SIEVE

; ------------------------------------------------------------

.local	COUNTDOWN					; UNIT

.local	RUN						; PROCEDURE

; --- For

; optimize OK (COUNTDOWN), line = 30

	mva #$01 A

; optimize OK (COUNTDOWN), line = 30

l_019D
; --- ForToDoCondition

; optimize OK (COUNTDOWN), line = 30

; --- For

; optimize OK (COUNTDOWN), line = 31

	mva #$09 B

; optimize OK (COUNTDOWN), line = 31

l_01B4
; --- ForToDoCondition

; optimize OK (COUNTDOWN), line = 31

; --- For

; optimize OK (COUNTDOWN), line = 32

	mva #$09 C

; optimize OK (COUNTDOWN), line = 32

l_01CB
; --- ForToDoCondition

; optimize OK (COUNTDOWN), line = 32

; --- For

; optimize OK (COUNTDOWN), line = 33

	mva #$09 D

; optimize OK (COUNTDOWN), line = 33

l_01E2
; --- ForToDoCondition

; optimize OK (COUNTDOWN), line = 33

; --- For

; optimize OK (COUNTDOWN), line = 34

	mva #$09 E

; optimize OK (COUNTDOWN), line = 34

l_01F9
; --- ForToDoCondition

; optimize OK (COUNTDOWN), line = 34

; --- For

; optimize OK (COUNTDOWN), line = 35

	mva #$09 F

; optimize OK (COUNTDOWN), line = 35

l_0210
; --- ForToDoCondition

; optimize OK (COUNTDOWN), line = 35

; --- For

; optimize OK (COUNTDOWN), line = 36

	mva #$09 G

; optimize OK (COUNTDOWN), line = 36

l_0227
; --- ForToDoCondition

; optimize OK (COUNTDOWN), line = 36

; --- ForToDoEpilog
	lda G
	beq l_0235
	dec G
	jmp l_0227
l_0235

; --- ForToDoEpilog
	lda F
	beq l_021E
	dec F
	jmp l_0210
l_021E

; --- ForToDoEpilog
	lda E
	beq l_0207
	dec E
	jmp l_01F9
l_0207

; --- ForToDoEpilog
	lda D
	beq l_01F0
	dec D
	jmp l_01E2
l_01F0

; --- ForToDoEpilog
	lda C
	beq l_01D9
	dec C
	jmp l_01CB
l_01D9

; --- ForToDoEpilog
	lda B
	beq l_01C2
	dec B
	jmp l_01B4
l_01C2

; --- ForToDoEpilog
	lda A
	beq l_01AB
	dec A
	jmp l_019D
l_01AB

; ------------------------------------------------------------

A	= $30
B	= $31
C	= $32
D	= $33
E	= $34
F	= $35
G	= $36
@FORTMP_019A	= $00
@FORTMP_01B1	= $00
@FORTMP_01C8	= $00
@FORTMP_01DF	= $00
@FORTMP_01F6	= $00
@FORTMP_020D	= $00
@FORTMP_0224	= $00
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

adr.NAME	= CODEORIGIN+$000F
.var NAME	= adr.NAME .word

.endl							; UNIT COUNTDOWN

; ------------------------------------------------------------

.local	MONTECARLO					; UNIT

.local	RUN						; PROCEDURE

; optimize OK (MONTECARLO), line = 32

	mva #$00 BINGO
	sta BINGO+1

; optimize OK (MONTECARLO), line = 33

	mva #$01 R
	mva #$3F R+1

; optimize OK (MONTECARLO), line = 34

	mva #$10 PROBE
	mva #$27 PROBE+1
; --- For

; optimize OK (MONTECARLO), line = 35

	mva #$00 I
	sta I+1

; optimize OK (MONTECARLO), line = 35

	mva PROBE :@FORTMP?026F_0
	mva PROBE+1 :@FORTMP?026F_1
l_0272
; --- ForToDoCondition

; optimize OK (MONTECARLO), line = 35

	lda I+1
.def :@FORTMP?026F_1 = *+1
	cmp #$00
	bne @+
	lda I
.def :@FORTMP?026F_0 = *+1
	cmp #$00
@
	scc
	jne l_027E

; optimize OK (MONTECARLO), line = 36

	mva RNDNUMBER N

; optimize OK (MONTECARLO), line = 37

	jpl l_0296

; optimize OK (MONTECARLO), line = 37

	eor #$80
	sta N
l_0296

; optimize OK (MONTECARLO), line = 38

	lda N
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta X+1
	lda :eax
	sta X

; optimize OK (MONTECARLO), line = 39

	mva RNDNUMBER N

; optimize OK (MONTECARLO), line = 40

	jpl l_02C7

; optimize OK (MONTECARLO), line = 40

	eor #$80
	sta N
l_02C7

; optimize OK (MONTECARLO), line = 41

	lda N
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta Y+1
	lda :eax
	sta Y

; optimize OK (MONTECARLO), line = 42

	add X
	sta :STACKORIGIN+9
	lda X+1
	adc Y+1
	cmp R+1
	bne @+
	lda :STACKORIGIN+9
	cmp R
@
	bcc @+
	jne l_02F7
@

; optimize FAIL (0, MONTECARLO), line = 42
	inc BINGO
	sne
	inc BINGO+1
l_02F7

; --- ForToDoEpilog
	inc I
	jne l_0272
	inc I+1
	jne l_0272
l_027E

; optimize OK (MONTECARLO), line = 44

	lda BINGO+1
	sta :eax+1
	lda BINGO
	asl @
	rol :eax+1
	asl @
	rol :eax+1
	sta FOUNDPI
	lda :eax+1
	sta FOUNDPI+1

; ------------------------------------------------------------

RNDNUMBER	= $D20A
I	= $E0
R	= $E2
X	= $E4
Y	= $E6
BINGO	= $E8
PROBE	= $EA
FOUNDPI	= $EC
N	= $EE
@FORTMP_026F	= $00
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

adr.NAME	= CODEORIGIN+$001A
.var NAME	= adr.NAME .word

.endl							; UNIT MONTECARLO

.local	INITSUITE					; PROCEDURE

; optimize OK (suite.pas), line = 34

	lda #$00
	sta :edx
	lda #$E0
	sta :edx+1
	lda #$00
	sta :ecx
	lda #$80
	sta :ecx+1
	lda #$00
	sta :eax
	lda #$04
	sta :eax+1
	jsr @move

; optimize FAIL ('B_SYSTEM.SYSTEMOFF_00A9', suite.pas), line = 35
	jsr B_SYSTEM.SYSTEMOFF_00A9

; optimize OK (suite.pas), line = 36

	ldy #256-$28
	lda #$FF
	sta:rne $0020+$28-256,y+

; optimize OK (suite.pas), line = 37

	lda #$00
	sta :edx
	lda #$E0
	sta :edx+1
	lda #$FF
	sta :ecx
	lda #$0F
	sta :ecx+1
	lda #$00
	sta :eax
	jsr @fill
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLCOUNER					; PROCEDURE | ASSEMBLER

; ---------------------  ASM Block 060  ---------------------


    :3	.byte $70
    .byte $42,$20,$00
    .byte $41,a(dlCouner)
  
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	VBLCOUNTER					; PROCEDURE | INTERRUPT

; ---------------------  ASM Block 061  ---------------------


		phr
	

; optimize FAIL (0, counter.inc), line = 15
	inc E

; optimize OK (counter.inc), line = 16

	lda E
	cmp #$0A
	jne l_0338

; optimize FAIL (0, counter.inc), line = 16
	inc D

; optimize OK (counter.inc), line = 16

	mva #$00 E
l_0338

; optimize OK (counter.inc), line = 17

	lda D
	cmp #$0A
	jne l_0355

; optimize FAIL (0, counter.inc), line = 17
	inc C

; optimize OK (counter.inc), line = 17

	mva #$00 D
l_0355

; optimize OK (counter.inc), line = 18

	lda C
	cmp #$0A
	jne l_0372

; optimize FAIL (0, counter.inc), line = 18
	inc B

; optimize OK (counter.inc), line = 18

	mva #$00 C
l_0372

; optimize OK (counter.inc), line = 19

	lda B
	cmp #$0A
	jne l_038F

; optimize FAIL (0, counter.inc), line = 19
	inc A

; optimize OK (counter.inc), line = 19

	mva #$00 B
l_038F

; ---------------------  ASM Block 062  ---------------------


		plr
	
	rti						; ret
.endl

.local	INITCOUNTER					; PROCEDURE

; optimize OK (counter.inc), line = 27

	lda #$00
	sta :edx
	lda #$80
	sta :edx+1
	lda #$00
	sta :ecx
	lda #$84
	sta :ecx+1
	lda #$00
	sta :eax
	lda #$04
	sta :eax+1
	jsr @move

; optimize OK (counter.inc), line = 28

	ldy #$4F
	mva:rpl $8080,y $8400,y-

; optimize OK (counter.inc), line = 29

	ldy #256-$08
	lda #$FF
	sta:rne $87F8+$08-256,y+

; optimize OK (counter.inc), line = 30

	mva #$84 CHBAS

; optimize OK (counter.inc), line = 30

	mva <DLCOUNER SDLSTL
	mva >DLCOUNER SDLSTL+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	STARTCOUNTER					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x :bp2
	mva :STACKORIGIN+STACKWIDTH,x :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.NAME,y+
	mwa #adr.NAME NAME
	dex

; optimize OK (counter.inc), line = 35

	ldy #256-$28
	lda #$FF
	sta:rne $0020+$28-256,y+

; optimize OK (counter.inc), line = 36

	mva #$00 A

; optimize OK (counter.inc), line = 36

	sta B

; optimize OK (counter.inc), line = 36

	sta C

; optimize OK (counter.inc), line = 36

	sta D

; optimize OK (counter.inc), line = 36

	sta E

; optimize OK (counter.inc), line = 37

	lda <adr.NAME+$01
	sta :edx
	lda >adr.NAME+$01
	sta :edx+1
	lda adr.NAME
	sta :eax
	lda #$26
	sta :ecx
	lda #$00
	sta :ecx+1
	sta :eax+1
	jsr @move

; optimize FAIL ('SYSTEM.PAUSE_00A4', counter.inc), line = 38
	jsr SYSTEM.PAUSE_00A4

; optimize FAIL ('B_SYSTEM.ENABLEVBLI', counter.inc), line = 39
	inx
	mva <VBLCOUNTER :STACKORIGIN,x
	mva >VBLCOUNTER :STACKORIGIN+STACKWIDTH,x
	jsr B_SYSTEM.ENABLEVBLI

; ------------------------------------------------------------

adr.NAME	= [DATAORIGIN+$2110] .array [256]
.var NAME	= adr.NAME .word

@VarData	= NAME
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_002D

; optimize FAIL ('INITSUITE', suite.pas), line = 43
	jsr INITSUITE

; optimize FAIL ('INITCOUNTER', suite.pas), line = 45
	jsr INITCOUNTER

; optimize FAIL ('STARTCOUNTER', suite.pas), line = 47
	inx
	mva #$00 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr STARTCOUNTER

; optimize FAIL ('BSORT.RUN', suite.pas), line = 48
	jsr BSORT.RUN

; optimize FAIL ('B_SYSTEM.DISABLEVBLI', suite.pas), line = 49
	jsr B_SYSTEM.DISABLEVBLI

; optimize FAIL ('STARTCOUNTER', suite.pas), line = 51
	inx
	mva #$08 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr STARTCOUNTER

; optimize FAIL ('SIEVE.RUN', suite.pas), line = 52
	jsr SIEVE.RUN

; optimize FAIL ('B_SYSTEM.DISABLEVBLI', suite.pas), line = 53
	jsr B_SYSTEM.DISABLEVBLI

; optimize FAIL ('STARTCOUNTER', suite.pas), line = 55
	inx
	mva #$0F :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr STARTCOUNTER

; optimize FAIL ('COUNTDOWN.RUN', suite.pas), line = 56
	jsr COUNTDOWN.RUN

; optimize FAIL ('B_SYSTEM.DISABLEVBLI', suite.pas), line = 57
	jsr B_SYSTEM.DISABLEVBLI

; optimize FAIL ('STARTCOUNTER', suite.pas), line = 59
	inx
	mva #$1A :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr STARTCOUNTER

; optimize FAIL ('MONTECARLO.RUN', suite.pas), line = 60
	jsr MONTECARLO.RUN

; optimize FAIL ('B_SYSTEM.DISABLEVBLI', suite.pas), line = 61
	jsr B_SYSTEM.DISABLEVBLI

; --- RepeatUntilProlog
l_03E9

; optimize OK (suite.pas), line = 66

	jmp l_03E9

; ------------------------------------------------------------

LMS	= $E000
A	= $20
B	= $21
C	= $22
D	= $23
E	= $24
SDLSTL	= $D402
CHBAS	= $D409
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.B_SYSTEM.@UnitInit
	jsr MAIN.B_SYSTEM.@UnitInit
	eif

	.ifdef MAIN.BSORT.@UnitInit
	jsr MAIN.BSORT.@UnitInit
	eif

	.ifdef MAIN.SIEVE.@UnitInit
	jsr MAIN.SIEVE.@UnitInit
	eif

	.ifdef MAIN.COUNTDOWN.@UnitInit
	jsr MAIN.COUNTDOWN.@UnitInit
	eif

	.ifdef MAIN.MONTECARLO.@UnitInit
	jsr MAIN.MONTECARLO.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.B_SYSTEM) > 0
	.print 'B_SYSTEM: ',MAIN.B_SYSTEM,'..',MAIN.B_SYSTEM+.SIZEOF(MAIN.B_SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.BSORT) > 0
	.print 'BSORT: ',MAIN.BSORT,'..',MAIN.BSORT+.SIZEOF(MAIN.BSORT)-1
	eif

	ift .SIZEOF(MAIN.SIEVE) > 0
	.print 'SIEVE: ',MAIN.SIEVE,'..',MAIN.SIEVE+.SIZEOF(MAIN.SIEVE)-1
	eif

	ift .SIZEOF(MAIN.COUNTDOWN) > 0
	.print 'COUNTDOWN: ',MAIN.COUNTDOWN,'..',MAIN.COUNTDOWN+.SIZEOF(MAIN.COUNTDOWN)-1
	eif

	ift .SIZEOF(MAIN.MONTECARLO) > 0
	.print 'MONTECARLO: ',MAIN.MONTECARLO,'..',MAIN.MONTECARLO+.SIZEOF(MAIN.MONTECARLO)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 8720

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $06 $62 $75 $62 $62 $6C $65 $00  $05 $73 $69 $65 $76 $65 $00 $09  $63 $6F $75 $6E $74 $64 $6F $77
.by  $6E $00 $0A $6D $6F $6E $74 $65  $63 $61 $72 $6C $6F $00
.endm

	end
